// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatSession {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model ChatUser {
  id            Int                    @id @default(autoincrement())
  name          String
  email         String                 @unique
  password      String
  bio           String?
  image         String?
  token         String?
  role          ChatRole               @default(USER)
  messages      ChatMessage[]
  conversations ChatConvoParticipant[]

  // Friends list (one-directional)
  friends  ChatFriendship[] @relation("UserFriends")
  friendOf ChatFriendship[] @relation("FriendOf")
}

model ChatFriendship {
  id        Int      @id @default(autoincrement())
  user      ChatUser @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  friend    ChatUser @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  Int
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model ChatConvo {
  id           Int                    @id @default(autoincrement())
  convoName    String?
  isGroup      Boolean                @default(false)
  messages     ChatMessage[]
  participants ChatConvoParticipant[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model ChatConvoParticipant {
  id             Int       @id @default(autoincrement())
  user           ChatUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  conversation   ChatConvo @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int

  @@unique([userId, conversationId])
}

model ChatMessage {
  id             Int       @id @default(autoincrement())
  body           String
  conversation   ChatConvo @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  author         ChatUser  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([authorId])
  @@index([conversationId])
}

enum ChatRole {
  ADMIN
  USER
}
